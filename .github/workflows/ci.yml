# This workflow will run the entire CI/CD pipeline, deploying to production
name: "CI/CD Pipeline"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go 1.23
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Download dependencies
        run: |
          cd app
          go mod download

      - name: Run tests
        run: |
          cd app
          go test

  lint:
    name: Lint Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: 1.9.5

      - name: Lint terraform
        run: |
          cd tf
          terraform fmt -check -recursive

      - name: Validate terraform
        run: |
          cd tf
          for dir in $(ls -d */); do
            cd $dir
            terraform init
            terraform validate
            cd ..
          done

  make_image:
    name: Build, tag & push image to ECR
    runs-on: ubuntu-latest
    environment: production

    # Only run this job if the CI job was successful
    needs: [test, lint]

    # Do not run on dependabot PRs or any PRs
    if: ${{ github.event_name != 'pull_request' }}
    # if: ${{ github.actor != 'dependabot[bot]' }}

    # Permissions needed for OIDC
    # See: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
    permissions:
      contents: read
      id-token: write

    # Outputs to be used by other jobs
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
      image: ${{ steps.full_tag.outputs.image }}

    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v4

      - name: Checkout code (PR version)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          # PRs do a merge commit before running the workflow, so we need to checkout the code without that.
          # See: https://github.com/actions/checkout/issues/426
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::730335542499:role/github-oidc-provider-aws # Must match name of IAM Role

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Calculate image tag
        id: image_tag
        run: echo "image_tag=$(./image-tag.sh)" >> $GITHUB_OUTPUT

      - name: Clean up commit message
        id: commit
        run: echo "message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT

      - name: Create the full tag
        id: full_tag
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: ensorcell/app # TODO - Change this to your ECR repository
          IMAGE_TAG: ${{ steps.image_tag.outputs.image_tag }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          pwd
          echo "$IMAGE_TAG" > ./app/RELEASE
          ls -la

      - name: Build, tag and push image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: app
          push: true
          tags: ${{ steps.full_tag.outputs.image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache to avoid growing forever
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [make_image]
    environment: production
    concurrency: production

    # Permissions needed for OIDC
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::730335542499:role/github-oidc-provider-aws # Must match name of IAM Role

      - name: Download task definition for webapp
        run: |
          aws ecs describe-task-definition --task-definition ensorcell-webapp-prod-webapp \
          --query taskDefinition > /tmp/webapp-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition for webapp
        id: task-def-webapp
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: /tmp/webapp-task-definition.json
          container-name: ensorcell-webapp-prod-webapp
          image: ${{ needs.make_image.outputs.image }}
          docker-labels: |
              SERVICE=ensorcell-webapp-prod-webapp
              VERSION=${{ steps.image_tag.outputs.image_tag }}

      - name: Deploy Amazon ECS task definition workers
        id: deploy-workers
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-workers.outputs.task-definition }}
          cluster: my-ecs-cluster
          service: my-prod-webapp
          wait-for-service-stability: true
          wait-for-minutes: 10
